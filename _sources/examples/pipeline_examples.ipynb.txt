{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 管道示例\n",
    "\n",
    "这个示例快速展示了如何在 `redis-py` 中使用管道。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 检查 Redis 是否正在运行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import redis \n",
    "\n",
    "r = redis.Redis(decode_responses=True)\n",
    "r.ping()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 简单示例"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 创建一个管道实例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = r.pipeline()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 向管道添加命令"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline<ConnectionPool<Connection<host=localhost,port=6379,db=0>>>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.set(\"a\", \"a value\")\n",
    "pipe.set(\"b\", \"b value\")\n",
    "\n",
    "pipe.get(\"a\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 执行管道"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[True, True, 'a value']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.execute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这三个命令的响应存储在一个列表中。在上述示例中，前两个布尔值表示 `set` 命令成功执行，列表的最后一个元素是 `get(\"a\")` 命令的结果。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 链式调用(Chained call)\n",
    "\n",
    "通过链式操作，可以在一行代码中获得与上述相同的结果。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[True, True, 'a value']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe = r.pipeline()\n",
    "pipe.set(\"a\", \"a value\").set(\"b\", \"b value\").get(\"a\").execute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 性能比较(Performance comparison)\n",
    "\n",
    "使用管道可以提高性能，欲了解更多信息，请参见 [Redis 文档关于管道的部分](https://redis.io/docs/manual/pipelining/)。以下是对基本命令和管道命令性能的简单比较测试（我们简单地增加一个值并测量两种方法所花费的时间）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "incr_value = 100000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 不用管道(Without pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "r.set(\"incr_key\", \"0\")\n",
    "\n",
    "start = datetime.now()\n",
    "\n",
    "for _ in range(incr_value):\n",
    "    r.incr(\"incr_key\")\n",
    "res_without_pipeline = r.get(\"incr_key\")\n",
    "\n",
    "time_without_pipeline = (datetime.now() - start).total_seconds()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Without pipeline\n",
      "================\n",
      "Time taken:  21.759733\n",
      "Increment value:  100000\n"
     ]
    }
   ],
   "source": [
    "print(\"Without pipeline\")\n",
    "print(\"================\")\n",
    "print(\"Time taken: \", time_without_pipeline)\n",
    "print(\"Increment value: \", res_without_pipeline)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 使用管道(With pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "r.set(\"incr_key\", \"0\")\n",
    "\n",
    "start = datetime.now()\n",
    "\n",
    "pipe = r.pipeline()\n",
    "for _ in range(incr_value):\n",
    "    pipe.incr(\"incr_key\")\n",
    "pipe.get(\"incr_key\")\n",
    "res_with_pipeline = pipe.execute()[-1]\n",
    "\n",
    "time_with_pipeline = (datetime.now() - start).total_seconds()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "With pipeline\n",
      "=============\n",
      "Time taken:  2.357863\n",
      "Increment value:  100000\n"
     ]
    }
   ],
   "source": [
    "print(\"With pipeline\")\n",
    "print(\"=============\")\n",
    "print(\"Time taken: \", time_with_pipeline)\n",
    "print(\"Increment value: \", res_with_pipeline)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用管道可以在更短的时间内获得相同的结果。"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "84048e2f8e89effc8610b2fb270e4858ef00e9403d223856d62b05266db287ca"
  },
  "kernelspec": {
   "display_name": "Python 3.9.2 ('.venv': venv)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
